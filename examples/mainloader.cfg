// This program lives at address 0 of xSVM execution space.
// It loads the main() function, once the main() function
// does it's job and returns, it halts the program execution.
// This program also ensures that xSVM will not run any program
// without a main() function declared!

#define _MAINLOADER 1

// In case main is not defined we need some way to detect that!
// Whenever the key in rpn's database is not set or defined it
// returns a null string. Taking crc16 check of the null string
// we get the magic value for NULL (65535). Now we can use this
// magic value to differentiate between null strings and string
// with characters. Which in turn helps us determine if main is
// declared or not! :*)
#define NULL 65535
#define ISNULL rpn dbpop crc16 ${NULL} == dbpush

label _goto_main

        // Add here stuff you want xSVM to do before it executes the main function.

        // The loader
        s load_g main
        s ${ISNULL};                            // check if it's a null string or not.
        s load_g _error_main_not_declared;      // If true throw an error and stop program
        s jif_vfs;                              // execution.
        s load_g main
        s call_vfs

        // Check main function's return status.
        s dup
        s store_l STATUS_CODE
        s push 0
        s iseq
        s not
        s load_g _main_exited_with_an_error
        s jif_vfs

        // Add here stuff you want xSVM to do after the main function finishes.

label _halt_execution
        s hlt

label _error_main_not_declared
        s pop; // remove the null string on the stack.
        s echo ^7[^3xSVM^7] ^1Error^7: ^2Main function is not declared.^7
label _print_termination_msg_and_exit
        s echo ^7[^3xSVM^7] ^1Terminating program execution.^7
        s load_g _halt_execution
        s jmp_vfs

label _main_exited_with_an_error
        s echo ^7[^3xSVM^7]: ^1Program exited with error code:^7
        s load_l STATUS_CODE
        s dot
        s load_g _halt_execution
        s jmp_vfs
