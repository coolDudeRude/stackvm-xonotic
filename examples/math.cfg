// Primitive example of a math library, functions like square, power, max, and
// min are here as a "proof of concept", use their respective xSVM instruction
// instead for better preformance.

#define _MATHLIB 1;     // This is used with #ifndef or #ifdef to control, inclusion
                        // of math.cfg, for example:
                        // #ifndef _MATHLIB
                        // d #include ${BASE_PATH ?}stackvm-xonotic/examples/math.cfg
                        // #endif
                        // this will only include the file if it's not already included.

// int square(int base)
// {
//      return base * base;
// }
label square
        s dup; // duplicate the stack head, [..., base] -> [..., base, base]
        s mul; // multiply top two values on the stack [..., base, base] -> [..., base * base]
        s ret; // return to caller!

// int power(int base, int n)
// {
//      int i = 1;
//      while (n > 0) {
//              i = base * i;
//              --n;
//      }
//      return i;
// }
label power
        // Store the arguments passed to "power" from the stack in reverse order.
        // As the arguments live on stack like this [..., base, n].
        s store_l n
        s store_l base
        s push 1;       // Initialize a local variable i with value 1
        s store_l i;    // int i = 1;

label _power_loop
        s load_l n;                     // Check when n is not greater than 0
        s push 0;                       // when that happens, branch to _exit_power_loop
        s isgt
        s not
        s load_g _exit_power_loop
        s jif_vfs

        // i = base * i;
        s load_l base
        s load_l i
        s mul
        s store_l i

        // --n;
        s load_l n
        s push 1
        s sub
        s store_l n

        s load_g _power_loop
        s jmp_vfs

label _exit_power_loop
        // return i;
        s load_l i
        s ret

// int max(int a, int b)
// {
//      if (a > b)
//              return a;
//      return b;
// }
label max
        // store the arguments in reverse order. just like power
        s store_l b
        s store_l a

        // if (a > b) return a;
        s load_l a
        s load_l b
        s isgt
        s load_g _return_a
        s jif_vfs

label _return_b
        // return b;
        s load_l b
        s ret

label _return_a
        s load_l a
        s ret

// int min(int a, int b)
// {
//      if(a < b)
//              return a;
//      return b;
// }
label min
        s store_l b
        s store_l a

        // if (a < b) return a;
        s load_l a
        s load_l b
        s islt
        s load_g _return_a;         // Here we're branching to what appears to be code realated with max.
        s jif_vfs;                  // But in reality max and min share the same if branch code, i.e "return a;"
                                    // so instead of creating separate code section for min, we'll use max's
                                    // return code. Same goes for "return b;".
                                    // ... Optimization baby! ;-)
        // return b;
        s load_g _return_b
        s jmp_vfs

// Factorial AHHHHHHH!!
// int factorial(int num)
// {
//      if (num < 1)
//              return 1;
//      else
//              return n * factorial(num - 1);
// }
label factorial
        s store_l num

        // if (num < 1) return 1;
        s load_l num
        s push 1
        s islt
        s load_g _return_one
        s jif_vfs

        // else return num * factorial(num - 1);
        s load_l num
        s push 1
        s sub
        s load_g factorial;     // Recursive function call baby! woohoo! :-)
        s call_vfs
        s load_l num
        s mul
        s ret

label _return_one
        s push 1
        s ret
