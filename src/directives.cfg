comment( vim: filetype=txt: formatoptions-=c: formatoptions-=r: formatoptions-=o

===========================================================================
                            Directive Aliases
===========================================================================
This script provides aliases that sort of function like the C preprocessor
directives. Supported features are listed below.

1 - Macro Definition:
      Define macros with #define, which will essentially be a cvar holding
      the contents to be substituted with. After defining a macro it can be
      used anywhere in the config file by expanding the macro just like how
      cvars are expanded ($<cvar>). One practical example is the "_rpn_not"
      macro used in this very script. For that see the note at the bottom
      of the script.
      One other example would be an rpn expression macro that checks if the
      item on the rpn stack is a null string.

        #define NULL 65535 // taking crc16 of null string gives 65535
        #define ISNULL "crc16 ${NULL} =="   // check if the item on the stack
                                            // is null string.

      Defined macros can be deleted with #undef, which essentially unsets the
      cvar.

2 - File inclusion:
      This directive simply executes a file only if the said file exists. This
      doesn't throw any error message if the file doesn't exist. That can be
      customized by changing "__svm_directive_include_error" alias.

      Example:
        #include stackvm-xonotic/examples/mainloader.cfg

3 - #ifdef and #ifndef with #else block and #endif:

      #ifdef and #ifndef take cvar name, the cvar should contain
      positive integer for the if code block to execute. Empty
      cvars are considered not defined. In case of #ifdef if code
      block is executed when the cvar contains positive integer
      value greater than zero, otherwise the else block is executed.
      It's opposite for #ifndef.

      Example:
        #ifndef _MATHCFG
        d #define _MATHCFG 1
        d label square
        d s dup
        d s mul
        d s ret
        #else
        d echo math.cfg already included
        #endif

      NOTE: the "d" alias is used to send the section following
      it to the respective code block, so it isn't executed when
      the file is executed.

4 - #if with #else block and #endif:
      #if is similar to #ifdef and #ifndef the only difference is
      that #if takes rpn expression as an input instead of a cvar name.

      Example Usage:
        #define UPPER_SPEED_LIMIT 300
        set speed 100

        #if ${UPPER_SPEED_LIMIT} /speed load >
          d echo Speed exceeds the speed limit of ${UPPER_SPEED_LIMIT}m/s
        #else
          d echo Speed is within speed limit (${UPPER_SPEED_LIMIT}m/s)
        #endif

      This example is not that practicle, it just illustrates the usage.
)

// #define & #undef
alias #define "set ${1 !} \"${2- ?}\""
alias #undef  "unset ${1 !}"

// #include
alias #include      "rpn /__FILE_EXISTS__ /${1 !} fexists =; alias __INCLUDE_1__ \"exec ${1 !}\"; alias __INCLUDE_0__ \"\"; __INCLUDE__"
alias __INCLUDE__   "__INCLUDE_${__FILE_EXISTS__}__"
alias __INCLUDE_0__ "__svm_directive_include_error"
alias __INCLUDE_1__ ""
alias __svm_directive_include_error ""

// Holders for IF ELSE code blocks and aliases
set __IF_CODE_BLOCK__       "" // store the action for the if path
set __ELSE_CODE_BLOCK__     "" // store the actions for the else path
set __action__              "_add_to_if_block"
set __preprocessor_action__ ""

alias _add_to_if_block    "__IF_CODE_BLOCK__ \"${__IF_CODE_BLOCK__}; ${1- !}\";"
alias _add_to_else_block  "__ELSE_CODE_BLOCK__ \"${__ELSE_CODE_BLOCK__}; ${1- !}\";"
alias _reset_code_blocks  "__IF_CODE_BLOCK__ \"\"; __ELSE_CODE_BLOCK__ \"\";"

// alias d sends it's input to the preprocessor actions set in __action__ cvar.
alias d "${__action__} ${1- q}"

// #If <rpn-expression>
alias #if "rpn /__IF_EXPR_RESULT__ ${1- ?} =; _reset_code_blocks; __action__ \"_add_to_if_block\"; __preprocessor_action__ \"__if__\";"
alias __if__    "__if_${__IF_EXPR_RESULT__}__"
alias __if_1__  "${__IF_CODE_BLOCK__}"
alias __if_0__  "${__ELSE_CODE_BLOCK__}"

// TODO: add support for #elseif
alias #else   "__action__ \"_add_to_else_block\";"
alias #endif  "${__preprocessor_action__}; __preprocessor_action__ \"\";"

// #ifdef <cvar_name>
alias #ifdef      "rpn /__DEF_TRUE__ 0 0${$1 ?} 0 + 1 bound =; _reset_code_blocks; __action__ \"_add_to_if_block\"; __preprocessor_action__ \"__ifdef__\";"
alias __ifdef__   "__ifdef_${__DEF_TRUE__}__"
alias __ifdef_1__ "${__IF_CODE_BLOCK__}"
alias __ifdef_0__ "${__ELSE_CODE_BLOCK__}"

comment(
      NOTE: In xonotic version 0.8.6 and below the "logical not and bitwise not" operation
      of rpn needs two operands to work. Thus wherever logical not is used in stackvm the stack head
      is duplicated with dup operation and then logical not is used. This behavior will be fixed in
      the next stable release of xonotic. If you're using latest autobuild with fix to this issue,
      then remove the "dup" operation from "not" and "#ifndef" alias. Otherwise stackvm might behave
      in unexpected ways.
      See commit related to above mentioned issue:
      https://gitlab.com/xonotic/xonotic-data.pk3dir/-/commit/6046ba734ca103327860714b19bad78951dd2549
      While not and #ifndef aliase can be changed manually to fix this problem, when the next stable
      version is released, however we can use the #if directive to set _rpn_not to either "not" or
      "dup not" depending on the xonotic gameversion cvar and expanding it wherever not is used.
)

#if ${gameversion} 806 <=
  d echo [^2NOTE^7] Xonotic version is ${gameversion}: ^2dup not^3 -> ^2_rpn_not^7
  d #define _rpn_not dup not
#else
  d echo [^2NOTE^7] Xonotic version is ${gameversion}: ^2not^3 -> ^2_rpn_not^7
  d #define _rpn_not not
#endif

// ifndef <cvar_name>
alias #ifndef      "rpn /__DEF_TRUE__ 0 0${$1 ?} 0 + ${_rpn_not} 1 bound =; _reset_code_blocks; __action__ \"_add_to_if_block\"; __preprocessor_action__ \"__ifndef__\";"
alias __ifndef__   "__ifndef_${__DEF_TRUE__}__"
alias __ifndef_1__ "${__IF_CODE_BLOCK__}"
alias __ifndef_0__ "${__ELSE_CODE_BLOCK__}"


// Macro for testing if the stack has a null string.
#define NULL 65535; // Value obtained after taking crc16 of a null string.
#define ISNULL rpn dbpop crc16 ${NULL} == dbpush

