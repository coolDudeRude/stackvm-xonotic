comment( vim: filetype=txt: formatoptions-=c: formatoptions-=r: formatoptions-=o
)
comment(
  Pause program execution
)
alias hlt   "private(VM_HALTED) 1"

comment(
  Stack Operations
)
alias push  "rpn ${1} dbpush"
alias pop   "rpn /private(LAST_POP) dbpop ="
alias dup   "rpn dbget dbpush"

comment(
  Arithmetic Operations
)
alias add   "rpn dbpop dbpop + dbpush"
alias sub   "rpn dbpop dbpop exch - dbpush"
alias mul   "rpn dbpop dbpop * dbpush"
alias div   "rpn dbpop dbpop exch / dbpush"
alias pow   "rpn dbpop dbpop exch ** dbpush"
alias mod   "rpn dbpop dbpop exch % dbpush"
alias max   "rpn dbpop dbpop max dbpush"
alias min   "rpn dbpop dbpop min dbpush"

comment(
  Boolean Operations
)
alias and   "rpn dbpop dbpop and dbpush"
alias or    "rpn dbpop dbpop or dbpush"
alias not   "rpn dbpop ${_rpn_not} dbpush"

comment(
  Comparison Operations
)
alias iseq  "rpn dbpop dbpop == dbpush"
alias isgt  "rpn dbpop dbpop exch > dbpush"
alias isge  "rpn dbpop dbpop exch >= dbpush"
alias islt  "rpn dbpop dbpop exch < dbpush"
alias isle  "rpn dbpop dbpop exch <= dbpush"
alias isne  "rpn dbpop dbpop != dbpush"

comment(
  JUMP Instructions
)
alias jmp   "rpn /private(INSTRUCTION_POINTER) ${1} 1 - ="
alias jif   "rpn dnl
nestedquote(dnl
//private(INSTRUCTION_POINTER) ${1 !} 1 - = dnl
) dnl
nestedquote(dnl
//private(null) 0 put dnl
) dnl
dbpop when eval"

comment(
  JUMP to address specified by the stack head
)
alias jmp_vfs "rpn /private(INSTRUCTION_POINTER) dbpop 1 - ="

comment(
  JUMP to address specified by the stack head,
  only if stack(stack.pos - 1) == 1
)
alias jif_vfs "rpn dnl
nestedquote(dnl
//private(INSTRUCTION_POINTER) dbpop 1 - = dnl
) dnl
nestedquote(dnl
//private(null) 0 put dnl
) dnl
dbpop dbpop exch dbpush when eval"

comment(
  Variable Storing and loading.
  store_l and load_l are for saving and loading local variable
  these variable have local scope, associated with the frame
)
alias store_l   "rpn /${private(FRAME_NUMBER)}.${1} dbpop put"
alias load_l    "rpn /${private(FRAME_NUMBER)}.${1} get dbpush"

comment(
  Global variables
  These variables have global scope
)
alias store_g   "rpn /${1} dbpop put"
alias load_g    "rpn /${1} get dbpush"

comment(
  load and store using key value from stack
)
alias store_vfs "rpn dbpop dbpop exch put"  commnet( -- void store_vfs(int key, int value)
alias load_vfs  "rpn dbpop get dbpush"    comment( -- int load_vfs(int key))

comment(
  Function calls and return
)
alias call  "private(init_frame); jmp ${1}"
alias ret   "rpn dnl
nestedquote(dnl
//uprivate(do) /uprivate(do_nothing) = dnl
/private(INSTRUCTION_POINTER) /private(FRAME_NUMBER) load /%s.return_address sprintf1s get = dnl
/private(FRAME_NUMBER) dup load 1 - =dnl
) dnl
nestedquote(dnl
//private(HALTED) 1 = dnl
/uprivate(do) /private(InvalidRetOpcode) =dnl
) dnl
/private(FRAME_NUMBER) load when eval; dnl
uprivate(do_pending);"

uprivate_alias(do_nothing, `')
uprivate_alias(do_pending, `${uprivate(do)}')


comment(
  call vector from stack - use the stack head as the
  pointer to a function used for interrupt routines
)
alias call_vfs "private(init_frame); rpn /private(INSTRUCTION_POINTER) dbpop 1 - ="

comment(
  print an interger from the stack head to console.
)
alias dot "rpn /uprivate(TEMP_OUT) dbpop =; uprivate(print_cvar) uprivate(TEMP_OUT)"
uprivate_alias(print_cvar, `echo ${$1}')

