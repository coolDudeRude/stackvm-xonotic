comment( vim: filetype=txt: formatoptions-=c: formatoptions-=r: formatoptions-=o
)
// Stack Based Virtual Machine using Xonotic's builtin database and stack.
// by JiƒÅn
// repo: https://github.com/coolDudeRude/stackvm-xonotic
//
// Suggested Reads:
// Xonotic Console Tips and tricks: https://forums.xonotic.org/showthread.php?tid=2987
// Xonotic rpn quakec source: https://gitlab.com/xonotic/xonotic-data.pk3dir/-/blob/master/qcsrc/common/command/rpn.qc
// Stack Machine on Wikipedia: https://en.wikipedia.org/wiki/Stack_machine
// Stack Based Virtual Machine written in Java: https://andreabergia.com/series/stack-based-virtual-machines/

include(src/directives.cfg)
include(src/errors.cfg)

comment(
  Initilize cvars to manage the VM's execution state.
)
private_cvar(CLOCK_SPEED, `0.001') comment( Time interval after which the next instruction is ran.
                                            As for the time resolution of defer command, I'm not sure ;^)

private_cvar(INSTRUCTION_POINTER, `0')
private_cvar(VM_HALTED, `0')
private_cvar(VM_IS_SLEEPING, `0')
private_cvar(FRAME_NUMBER, `-1')

comment(
  Frame Manager, creates a new frame each time it's called.
  Which simply increments the FRAME_NUMBER cvar, the local
  variables for the VM are attached to this frame number,
  like: <frame-num>.<var-name>. This is how local variables
  are stored inside the database.

  Each frame also contains the return address from where
  the function call was made. (<frame-num>.return_address)
  The start frame (zero frame) contains a null string for
  return address.

  Use 'ISNULL' macro (defined in src/directives.cfg) to see
  if the return address is null/valid or not.
)
private_alias(
init_frame,
`rpn /private(FRAME_NUMBER) dup load 1 + = dnl
/private(FRAME_NUMBER) load /%s.return_address sprintf1s /private(INSTRUCTION_POINTER) load put;'dnl
)
rpn /0.return_address '' put

comment(
  Initilize the frame during script execution.
  This will enable us to have scoped variables.
)
private(init_frame)

comment(
  VM main loop, responsible of executing the program.
)
alias run quote(uprivate(CPU_HALTED_${private(VM_HALTED)}))

uprivate_alias(
CPU_HALTED_0,
`__svm.${private(INSTRUCTION_POINTER)}; dnl
rpn /private(INSTRUCTION_POINTER) dup load 1 + =; dnl
defer ${private(CLOCK_SPEED)} nestedquote(uprivate(CPU_POST_EXEC))' dnl
)

uprivate_alias(CPU_POST_EXEC, uprivate(CPU_HALTED_${private(VM_HALTED)}))
uprivate_alias(CPU_HALTED_1, `')

comment(
  Reset the VM to initial state.
)
alias reset quote(dnl
private(INSTRUCTION_POINTER) 0; dnl
private(VM_HALTED) 0; dnl
private(FRAME_NUMBER) 0; dnl
uprivate(program_counter) 0;dnl
echo ^7[STACKVM]: ^2CPU reset complete.^7 dnl
)

comment(
  Make the stackvm CPU wait for some time before resuming program execution.
)
alias sleep quote(set uprivate(sleep_time) ${1}; uprivate(SLEEP_CPU_${private(VM_IS_SLEEPING)}))
uprivate_alias(
SLEEP_CPU_0,
`private(VM_IS_SLEEPING) 1; dnl
defer ${uprivate(sleep_time)} dnl
nestedquote(dnl
private(CLOCK_SPEED) ${private(CLOCK_SPEED)}; dnl
private(VM_IS_SLEEPING) 0 dnl
); dnl
private(CLOCK_SPEED) ${uprivate(sleep_time__)}' dnl
)

uprivate_alias(
SLEEP_CPU_1,
`private(VMAlreadySleeping)'dnl
)

comment(
  Include VM opcode defined in src/opcode.cfg
)
include(src/opcode.cfg)dnl
include(src/dynamic_programming.cfg)
